PARAMA 10 #cantidad de nodos
PARAMB 1 # porcentaje de peers que se le envian tareas
PARAMC 0.5 # porcentaje de peers que vuelven a pedir tareas # no la estoy usandoo!!!!!!
PARAMD 0.6 #Threshold de consenso
PARAME 60000 # ventana de tiempo para calcular score (a lo mas 4 valores)
PARAMF 0.3 # porcentaje de usuarios expertos
PARAMG1 0.4 # probabilidad de elegir opcion correcta normal
PARAMG2 0.7 # probabilidad de elegir opcion correcta experto #dejar fijo, no mas del 20% de los nodos
PARAMH 25 #tamaño de cache 10% del tamaño de disco de los nodos

#20 gigas de disco cuando tienen --> 2 gigas para cache --> 2mb por foto --> 1000 fotos :O
#memoria flash de 8 mb --> 1 mb para cache --> 800kb por foto --> 1 foto en la cache :O
#memoria ram de 16 MB


#el emulador de un STB de ginga viene por defecto con una capacidad de almacenamiento de 500mb
#10% de eso son 50mb -->2mb por foto --> 25 fotos





CYCLE  100000
CYCLES 1000 #10^6
SIZE PARAMA
M 14
SUCC_SIZE 4

#buscar mas info sobre estos delay!!
MIN_DELAY 29 #milisegundos
MAX_DELAY 34 #milisegundos

random.seed 12345678
simulation.endtime CYCLE*CYCLES
#simulation.logtime CYCLE

simulation.experiments 1

network.size SIZE
#trabajar con TTL cuando un nodo se cae esperar cierto tiempo, y asumir que la respuesta no llego
#evaluar si las respuestas esperadas llegan a un concenso.
#cache LRU

#los tiempos de transferencia de una imagen y lista de id deben ser distintos,
#la imagen demora mas en enviar
#hacer eso jugando con cuanto tiempo esperar para enviar la imagen

#costo de salir al servidor es mayor a transferir alpha 0.2 por ejemplo
#penalizar con tiempos al momento de enviar un mensaje.

#buscar tiempos al momento de salir de la red p2p

#ranking de peers, que tan buenos son esos peer:
#tener un historial con sus tiempos de respuesta por ejemplo
#no siempre se puede sobrecargar a los peer que siempre responden bien.
#recalcular constantemente el puntaje de cada peer. cada cuanto tiempo?


protocol.tr UniformRandomTransport
{
	mindelay MIN_DELAY
	maxdelay MAX_DELAY
}

protocol.chord ChordProtocol
{
	transport tr
}

protocol.tesis ProtocoloAcuerdo
{
   cacheSize PARAMH
   directorio /home/jano/Imágenes/labelme/train/Images/madrid_static_street
}


control.traffic SolicitadorTareas
{
	protocol tesis
	users PARAMA*PARAMB
	step 100
	from 0
	until 9
}

init.constantes Constantes
{
	tasks 10
	threshold_r 5
	threshold_c PARAMD
	continuar PARAMC
	init_delay 1.5

	prob_experto PARAMF

	#por ahora 1.5, pero hay que probar con mas pesos
	peso 1.5

	#Min       : 0                    milisegundos
	#Max       : 82715000             milisegundos
	#Promedio  : 4158.0               milisegundos
	#Varianza  : 6.149232183200805E10 milisegundos
	#Desv. Est.: 247976.45418871538   milisegundos
	#Errores   : 2570
	#Total     : 114168

	min_task_delay 100
	max_task_delay 20000

	#http://www.verizonenterprise.com/about/network/latency/#vsat
	#latencias de un ping de 64bytes dentro de estados unidos
	#promedio todos los ping en un mes
	min_com_delay MIN_DELAY
	max_com_delay MAX_DELAY

	#se asume un servidor en EEUU, y un ping de 64 bytes demora eso
	#segun http://www.cloudping.info/
	min_server_delay 154
	max_server_delay 188

	#1 ping es un mensaje de 64 bytes
	com_size 64
	consenso_solvers 5

	prob_experto_correcta PARAMG2
	prob_normal_correcta PARAMG1

	alpha 1.0
	beta 1.0
	gamma 1.0
	delta 1.0


	#cuanto tiempo esperar antes de verificar si se reenvio la lista de tareas
	ttl_resend 1000
	max_respuestas 20 #consenso_solvers*4
}

init.create ChordInitializer
{
	protocol chord
	miprotocolo tesis
	transport tr
	version TESTING


}

control.maintain ChordMaintainer
{
	step 10500
}



control.observer ResultObserver
{
	protocol chord
	#step 90000
	at CYCLE*CYCLES
	FINAL
}

control.queueObserver QueueObserver
{
	protocol tesis
	step PARAME
	#at CYCLE

}


control.lnkob LinkObserver
{
	protocol chord
	FINAL
	at CYCLES
}
